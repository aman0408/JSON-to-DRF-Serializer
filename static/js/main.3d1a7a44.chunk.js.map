{"version":3,"sources":["components/Input/Input.js","components/DRF/DRF.js","util/parseJSONToDRF.js","components/Button/Button.js","components/JSON/JSON.js","App.js","reportWebVitals.js","index.js"],"names":["TextArea","height","this","props","value","Math","min","split","length","maxLines","placeHolder","classes","error","push","title","className","join","style","placeholder","readOnly","onChange","e","index","onKeyDown","key","preventDefault","target","selectionStart","selectionEnd","substring","Component","DRFSide","formatDRFField","field_type","required","nullable","tab","string","tab_separator","equals","includes","parseJSONToDRF","arr","response","key_types","i","count","type","isPossible","data","addRequiredKey","createKeyToTypesObject","a","Button","onClick","disabled","JSONSide","initialInput","maxInputCount","onJSONInputChange","JSONInputs","state","inputs","val","newInput","replace","setState","JSON","parse","addJSONInput","serialize","perpareData","undefined","onSerializeCallback","map","input","idx","marginTop","float","App","useState","DRFValue","setDRFValue","borderRight","DRF","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3d1a7a44.chunk.js","sourcesContent":["import { Component } from 'react';\nimport './Style.css'\n\nclass TextArea extends Component {\n\n    render() {\n        const height = this.props.value ? \n            Math.min(this.props.value.split(\"\\n\").length, this.props.maxLines) + 1 : \n            Math.min(this.props.placeHolder.split(\"\\n\").length, this.props.maxLines) + 1;\n        let classes = []\n        if (this.props.error)\n            classes.push(\"has-error\")\n        return (\n            <div>\n                <h3>{this.props.title}</h3>\n                <textarea className={classes.join(\" \")}\n                    style={{height: height * 20 + \"px\" }}\n                    placeholder={this.props.placeHolder}\n                    readOnly={this.props.readOnly}\n                    onChange={(e) => {this.props.onChange(e, this.props.index);} } \n                    onKeyDown={ (e) => {\n                        if(e.key === \"Tab\") {\n                            e.preventDefault();\n                            const {selectionStart, selectionEnd} = e.target;\n                            e.target.value = e.target.value.substring(0, selectionStart) + \"\\t\" + e.target.value.substring(selectionEnd)\n                            this.props.onChange(e, this.props.index);\n                        }\n                    }}\n                    value={this.props.value} \n                />\n                <small className=\"error\">{this.props.error}</small>\n            </div>\n        ) \n    }\n\n}\n\nexport default TextArea","import { Component } from \"react\";\nimport TextArea from \"../Input/Input\";\n\n\nclass DRFSide extends Component {\n\n    placeHolder = `from rest_framework import serializers\\n\\nclass NameSerializer(serializers.Serializer):\\n\\tname = serializers.CharField(required=True)`;\n\n    render() {\n        return (\n            <TextArea\n                value={this.props.value}\n                readOnly={true}\n                title={\"DRF Serializer\"}\n                placeHolder={this.placeHolder}\n                maxLines={80}\n            />\n        )\n    }\n}\n\n\nexport default DRFSide;","function createKeyToTypesObject(arr) {\n\n    let key_types = {}\n\n    for (const i in arr) {\n        for (const key in arr[i]) {\n\n            if (key in key_types) {\n                key_types[key].count += 1;\n                if (typeof (arr[i][key]) === key_types[key].type) {\n                    if (arr[i][key] === null)\n                        key_types[key].nullable = true;\n                } else if (arr[i][key] === null) {\n                    key_types[key].nullable = true;\n                } else {\n                    return {\n                        isPossible: false,\n                        data: \"JSON cannot be converted to DRF as \" + \"\\'\" + key + \"\\'\" + \" field is of varying types.\"\n                    }\n                }\n            } else {\n                key_types[key] = {\n                    type: typeof (arr[i][key]),\n                    count: 1,\n                    nullable: false\n                };\n            }\n\n        }\n    }\n    return addRequiredKey(arr, key_types);\n}\n\nfunction addRequiredKey(arr, key_types) {\n    let count = arr.length;\n\n    for (const key in key_types) {\n        if (key_types[key].count === count) {\n            key_types[key].required = true;\n        } else {\n            key_types[key].required = false;\n        }\n    }\n\n    return {\n        isPossible: true,\n        data: key_types\n    };\n}\n\nfunction formatDRFField(key, field_type, required, nullable, tab = true) {\n\n    let string = \"\";\n    let tab_separator = tab ? \"\\t\" : \"  \";\n    let equals = \" =\"\n\n    if (field_type.includes(\"Boolean\")) {\n        if (!required) {\n            string += tab_separator + key + equals + field_type + \"(required=False)\\n\";\n        } else\n            string += tab_separator + key + equals + field_type + \"()\\n\";\n    } else {\n        string += tab_separator + key + equals + field_type;\n\n        if (nullable && !required) {\n            string += \"(required=False, allow_null=True)\\n\";\n        } else if (nullable && required) {\n            string += \"(allow_null=True)\\n\";\n        } else if (!nullable && !required) {\n            string += \"(required=False)\\n\";\n        } else {\n            string += \"()\\n\";\n        }\n    }\n\n    return string;\n}\n\nfunction parseJSONToDRF(arr) {\n    let response = createKeyToTypesObject(arr);\n\n    let isPossible = response.isPossible;\n\n    if (!isPossible)\n        return response.data;\n    \n    const key_types = response.data;\n\n    let string = \"from rest_framework import serializers\\n\\nclass ExampleSerializer(serializers.Serializer):\\n\";\n\n    for (const key in key_types) {\n\n        let required = key_types[key].required;\n        let nullable = key_types[key].nullable;\n        let field_type = typeof (\"abc\");\n\n        if (key_types[key].type === typeof (true)) {\n\n            if (nullable) {\n                field_type = \" serializers.NullBooleanField\"\n            } else {\n                field_type = \" serializers.BooleanField\"\n            }\n        }\n        else if (key_types[key].type === typeof (1)) {\n\n            field_type = \" serializers.IntegerField\"\n        }\n        else if (key_types[key].type === typeof (1.1)) {\n\n            field_type = \" serializers.FloatField\"\n        }\n        else if (key_types[key].type === typeof (\"abc\")) {\n\n            field_type = \" serializers.CharField\"\n        }\n        else if (key_types[key].type === typeof ({\n            a: 1\n        })) {\n\n            field_type = \" serializers.JSONField\"\n        }\n        else if (key_types[key].type === typeof ([12, 1])) {\n\n            field_type = \" serializers.ListField\"\n        }\n        string += formatDRFField(key, field_type, required, nullable);\n    }\n\n    return string\n\n}\n\nexport default parseJSONToDRF;\n","import { Component } from \"react\";\nimport './Style.css';\n\nclass Button extends Component {\n    render() {\n        return ( \n            <button style={{...this.props.style}}\n                onClick={this.props.onClick}\n                disabled={this.props.disabled}\n            >\n                {this.props.title}\n            </button>\n        )\n    }\n}\n\nexport default Button;","import { Component } from \"react\";\nimport parseJSONToDRF from \"../../util/parseJSONToDRF\";\nimport Button from \"../Button/Button\";\nimport TextArea from \"../Input/Input\";\n\nclass JSONSide extends Component {\n\n    placeHolder = `{\\n\\t\"name\": \"John Doe\"\\n}`;\n    initialInput = {\n        value: \"\",\n        error: \"\"\n    };\n    maxInputCount = 5;\n\n    constructor(props) {\n        super(props);\n        this.state =  {\n            inputs: [{\n                value: \"\",\n                error: \"\"\n            }]\n        };\n    }\n\n    onJSONInputChange = (e, key) => {\n        let JSONInputs = this.state.inputs;\n        let val = e.target.value;\n        let newInput = {\n            value: val,\n            error: \"\"\n        };\n        val.replace(\"\\n\", \"\");\n        val.replace(\"\\t\", \"\");\n        this.setState({\n            inputs: JSONInputs\n        });\n        try {\n            JSON.parse(val);\n        } catch {\n            newInput.error = \"Invalid JSON\";\n        }\n        JSONInputs[key] = newInput;\n        this.setState({\n            inputs: JSONInputs\n        })\n    }\n\n    addJSONInput = () => {\n        let inputs = this.state.inputs;\n        if (inputs.length >= this.maxInputCount) return;\n        inputs.push(this.initialInput);\n        this.setState({\n            inputs: inputs\n        })\n    }\n\n    serialize = () => {\n        const data = this.perpareData();\n        if (data === undefined) {\n            return;\n        }\n        const val = parseJSONToDRF(data);\n        this.props.onSerializeCallback(val);\n    }\n\n    perpareData = () => {\n        let data = [];\n        for(let i=0; i<this.state.inputs.length; ++i) {\n            try {\n                let val = JSON.parse(this.state.inputs[i].value);\n                data.push(val);\n            } catch {\n                return undefined\n            }\n        }\n        return data;\n    }\n\n    render() {\n        return (\n            <>\n            {\n                this.state.inputs.map((input, idx) => (\n                    <TextArea \n                        value={input.value}\n                        placeHolder={this.placeHolder}\n                        error={input.error}\n                        key={idx}\n                        index={idx}\n                        title={`Sample JSON #${idx + 1}`}\n                        onChange={this.onJSONInputChange}\n                        maxLines={20}\n                    />\n                ))\n            }\n            <Button \n                style={{marginTop: 10}}\n                onClick={this.addJSONInput}\n                title={\" + Add Another JSON\"}\n                disabled={this.state.inputs.length >= this.maxInputCount }\n            />\n            <Button\n                style={{marginTop: 10, float: \"right\"}}\n                title={\"To Serializer\"}\n                onClick={this.serialize}\n            />\n            </>\n        )\n    }\n}\n\nexport default JSONSide;","import { useState } from 'react';\nimport './App.css';\nimport DRFSide from './components/DRF/DRF';\nimport JSONSide from './components/JSON/JSON';\n\nfunction App() {\n\n  const [DRFValue, setDRFValue] = useState(\"\");\n\n  const onSerializeCallback = (val) => {\n    setDRFValue(val)\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"row\">\n        <div className=\"col col-half col-fs\" style={{borderRight: \"1px solid #5C5C5C\"}}>\n          <JSONSide onSerializeCallback={onSerializeCallback}/>\n        </div>\n        <div className=\"col col-half col-fs\">\n          <DRFSide value={DRFValue}/>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}